
/// WARNING: THIS IS AN EXAMPLE TEMPLATE AND IS NOT TO BE MODIFIED ///

/// FILE -> SAVE AS : BEFORE YOU EDIT THIS FILE! ///

/// Comments guidance:

// For small comments, like this one, use the double //
// Use lots of small comments, almost every line, as a quick way of explaining what you are doing

/// FOR BIG BLOCKS OF CODE
/// Where there is an overriding objective,
/// such as in a function,
/// use three /// to explain what the overall objective of the block of code is to do

/* Multi-line comments
 *
 * Put these before things like class functions
 * where a more detailed explanation is required.
 *
 * You can put bullet points in these eg:
 * 1:) blaa
 * 2:) foo-bar is dog food
 * 3:) etc...
 * OR
 * - Objective A
 * - Thing B
 * - Idea C
 */

 //TODO comments are like this:
 //TODO: Put this in the correct file
 //TODO: finish this method after finishing lunch

 /** Detailed comments, class documentation and file doc **/

 /**********************************************************
  **
  ** File: MYCLASS.hpp
  **
  ** Programmed by: Edward Birdsall
  ** Date: 2012-11-20
  ** Time: 19:00
  ** Last edit by: Jake Burch
  ** Date: 2012-11-20
  ** Time: 19:30
  ** We don't usually care about this stuff but it's nice to
  ** include.
  **
  ** Class Documentation:
  ** This is an example file telling you how to structure a class
  ** and comment it well.
  **
  ************************************************************/

/// PUT THIS IN CLASSNAME.hpp ///

#ifndef __CLASSNAME__HPP__
#define __CLASSNAME__HPP__

class CLASSNAME{

    public:
        // Constructor
        CLASSNAME();
        // Destructor
        ~CLASSNAME();
        // Copy Constructor (think: clone)
        CLASSNAME(const CLASSNAME& other);
        // Assignment Operator (think: A = B)
        const CLASSNAME& operator=(const CLASSNAME& rhs);

        // Example function
        int classFunction(void);

    protected:
        // Example Protected Variable
        double p_VARIABLENAME;
        // Example Protected Array
        double* q_ARRAYNAME;

    private:
        // Example Variable
        double m_VARIABLENAME;
        // Example Array
        double* n_ARRAYNAME;

};

#endif

/// END OF CLASSNAME.hpp ///

/// PUT THIS IN CLASSNAME.cpp ///

#include "CLASSNAME.hpp"

CLASSNAME::CLASSNAME()
{
    // Constructor
}

CLASSNAME::~CLASSNAME()
{
    // Destructor
}

CLASSNAME::CLASSNAME(const CLASSNAME& other)
{
    // Clone constructor (Copy Constructor)

    // POINTER STUFF HERE
}

const CLASSNAME& operator=(const CLASSNAME& rhs)
{
    // Assignment Opperator

    // POINTER STUFF HERE
}

int CLASSNAME::classFunction()
{
    // Method
    int a = 0;
    return a;
}

/// END OF CLASSNAME.cpp ///
